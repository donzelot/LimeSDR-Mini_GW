-- generated by pyha 0.0.10
library ieee;
    use ieee.std_logic_1164.all;
    use ieee.numeric_std.all;
    use ieee.fixed_float_types.all;
    use ieee.fixed_pkg.all;
    use ieee.math_real.all;

library work;
    use work.complex_pkg.all;
    use work.PyhaUtil.all;
    use work.Typedefs.all;
    use work.all;
    use work.DataValid_39.all;
    use work.DataValid_38.all;
    use work.DataValid_37.all;
    use work.DataValid_0.all;
    use work.DataValid_17.all;
    use work.DataValid_36.all;
    use work.ShiftRegister_16.all;
    use work.DownCounter_0.all;
    use work.MovingAverage_2.all;
    use work.ShiftRegister_0.all;
    use work.MovingAverage_0.all;
    use work.ShiftRegister_18.all;
    use work.DCRemoval_1.all;

-- Windowing function determines the frequency response of the FFT bins.
package Windower_0 is
    type self_t is record
        \out\: DataValid_0.self_t;
        index_counter: integer;
        coef: sfixed(0 downto -7);
    end record;
    type Windower_0_self_t_list_t is array (natural range <>) of Windower_0.self_t;

    type self_t_const is record
        FFT_SIZE: integer;
        WINDOW: Typedefs.sfixed0downto_7_list_t(0 to 8191);
        \out\: DataValid_0.self_t_const;
    end record;
    type Windower_0_self_t_const_list_t_const is array (natural range <>) of Windower_0.self_t_const;

    procedure main(self:in self_t; self_next:inout self_t; constant self_const: self_t_const; inp: DataValid_0.self_t; ret_0:out DataValid_0.self_t);
    function Windower(\out\: DataValid_0.self_t; index_counter: integer; coef: sfixed(0 downto -7)) return self_t;
end package;

package body Windower_0 is
    procedure main(self:in self_t; self_next:inout self_t; constant self_const: self_t_const; inp: DataValid_0.self_t; ret_0:out DataValid_0.self_t) is


    begin
        if not inp.valid then
            ret_0 := DataValid(self.\out\.data, valid=>False);
            return;

        end if;
        self_next.index_counter := (self.index_counter + 1) mod self_const.FFT_SIZE;
        self_next.coef := resize(self_const.WINDOW(self.index_counter), 0, -7, fixed_saturate, fixed_round);

        self_next.\out\.data := resize(inp.data * self.coef, 0, -17, fixed_wrap, fixed_round);
        self_next.\out\.valid := inp.valid;
        ret_0 := self.\out\;
        return;
    end procedure;

    function Windower(\out\: DataValid_0.self_t; index_counter: integer; coef: sfixed(0 downto -7)) return self_t is
        -- constructor
        variable self: self_t;
    begin
        self.\out\ := \out\;
        self.index_counter := index_counter;
        self.coef := coef;
        return self;
    end function;
end package body;
