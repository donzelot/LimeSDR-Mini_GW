-- generated by pyha 0.0.10
library ieee;
    use ieee.std_logic_1164.all;
    use ieee.numeric_std.all;
    use ieee.fixed_float_types.all;
    use ieee.fixed_pkg.all;
    use ieee.math_real.all;

library work;
    use work.complex_pkg.all;
    use work.PyhaUtil.all;
    use work.Typedefs.all;
    use work.all;
    use work.DataValid_39.all;
    use work.DataValid_38.all;
    use work.DataValid_37.all;
    use work.DataValid_0.all;
    use work.DataValid_17.all;
    use work.DataValid_36.all;
    use work.ShiftRegister_16.all;
    use work.DownCounter_0.all;

-- :param window_len: Size of the moving average window, must be power of 2 and >= 2
-- :param dtype: internal storage type, Sfix/Complex
package MovingAverage_2 is
    type self_t is record
        shr: ShiftRegister_16.self_t;
        acc: complex_t(21 downto -34);
        \out\: DataValid_0.self_t;
        start_counter: DownCounter_0.self_t;
    end record;
    type MovingAverage_2_self_t_list_t is array (natural range <>) of MovingAverage_2.self_t;

    type self_t_const is record
        WINDOW_LEN: integer;
        BIT_GROWTH: integer;
        shr: ShiftRegister_16.self_t_const;
        \out\: DataValid_0.self_t_const;
        start_counter: DownCounter_0.self_t_const;
    end record;
    type MovingAverage_2_self_t_const_list_t_const is array (natural range <>) of MovingAverage_2.self_t_const;

    procedure main(self:in self_t; self_next:inout self_t; constant self_const: self_t_const; inp: DataValid_39.self_t; ret_0:out DataValid_0.self_t);
    function MovingAverage(shr: ShiftRegister_16.self_t; acc: complex_t(21 downto -34); \out\: DataValid_0.self_t; start_counter: DownCounter_0.self_t) return self_t;
end package;

package body MovingAverage_2 is
    procedure main(self:in self_t; self_next:inout self_t; constant self_const: self_t_const; inp: DataValid_39.self_t; ret_0:out DataValid_0.self_t) is

        variable pyha_ret_0: complex_t(1 downto -22);
        variable pyha_ret_1: boolean;
    begin
        if not inp.valid then
            ret_0 := DataValid(self.\out\.data, valid=>False);
            return;

        end if;
        DownCounter_0.tick(self.start_counter, self_next.start_counter, self_const.start_counter);
        ShiftRegister_16.push_next(self.shr, self_next.shr, self_const.shr, inp.data);
        -- add new element to shift register
        ShiftRegister_16.peek(self.shr, self_next.shr, self_const.shr, pyha_ret_0);
        self_next.acc := resize(self.acc + inp.data - pyha_ret_0, 10, -17, fixed_wrap, fixed_truncate);

        self_next.\out\.data := resize(scalb(self.acc, -self_const.BIT_GROWTH), 0, -17, fixed_wrap, fixed_round);
        DownCounter_0.is_over(self.start_counter, self_next.start_counter, self_const.start_counter, pyha_ret_1);
        self_next.\out\.valid := pyha_ret_1;
        ret_0 := self.\out\;
        return;
    end procedure;

    function MovingAverage(shr: ShiftRegister_16.self_t; acc: complex_t(21 downto -34); \out\: DataValid_0.self_t; start_counter: DownCounter_0.self_t) return self_t is
        -- constructor
        variable self: self_t;
    begin
        self.shr := shr;
        self.acc := acc;
        self.\out\ := \out\;
        self.start_counter := start_counter;
        return self;
    end function;
end package body;
